/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_complete.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: tnard <marvin@42.fr>                       +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/07/18 09:34:01 by tnard             #+#    #+#             */
/*   Updated: 2021/07/18 09:34:01 by tnard            ###   ########lyon.fr   */
/*                                                                            */
/* ************************************************************************** */

#include "rush01.h"

int	ft_check_view_line(int	**tab, int	x, int	y, int size)
{
	int	view;
	int	tmp;
	int	n;

	n = 1;
	view = 1;
	tmp = tab[y][1];
	while (n <= size)
	{
		if (tmp < tab[y][n++])
		{
			tmp = tab[y][n - 1];
			view++;
		}
	}
	if (view <= tab[y][0])
		return (1);
	return (0);
}

int	ft_solve(int **tab, int x, int y, int size)
{
	int	n;

	n = 1;
	while (n <= size)
	{
		ft_putstr("-----------------\n");
		ft_show(tab, size);
		ft_putstr("-----------------\n");
		usleep();
		system("clear");
		tab[y][x] = n;
		if (ft_check_view_line(tab, x, y, size))
		{	
			if (ft_check(tab, size, x, y))
			{
				if (x == size + 1 && y == size + 1)
					return (1);
				else if (x < size)
				{
					if (ft_solve(tab, x + 1, y, size))
						return (1);
					else
						tab[y][x] = 0;
				}
				else if (y < size)
				{
					if (ft_solve(tab, 1, y + 1, size))
						return (1);
					else
						tab[y][x] = 0;
				}
			}
		}
		n++;
	}
	return (0);
	/*
	if (x == 1 && y >= 1)
	{
		tab[y - 1][size]++;
		ft_solve(tab, x, y - 1, size);
	}
	else if (x < 1)
	{
		tab[y][x - 1]++;
		ft_solve(tab, x - 1, y, size);
	}*/
	return (0);
}

/*int	ft_solve(int **tab, int x, int y, int size)
{
	int	n;
	x++;
	n = 1;
	while (n <= size)
	{
		tab[y][x] = n;
		if (ft_check(tab, size) && ft_check_view_line(tab, x, y, size))
		{	
			if (x == size && y == size)
				return (1);
			if (x <= size)
				if (ft_solve(tab, x, y, size))
					return (1);
			else
				if (ft_solve(tab, 1, y + 1, size))
					return (1);
		}
		n++;
		ft_show(tab, size);
		ft_putstr("----------------\n");
		usleep(100000);
		system("clear");
	}
	tab[y][x] = 0;
	return (0);
}
*/